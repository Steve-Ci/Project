# Project

import sys
import random
import numpy as np
import string

class PlayerInforMation:
    def __init__(self,name,amount):
        self.name = name
        self.amount = amount
    def __int__(self):
        if self.amount >= 100:
            return True
        else:
            return False
    def __str__(self):
        if PlayerInforMation.__int__(self) == True:
            return 'Dear ' + self.name +',Game Will Begin. You have '+ str(self.amount)+' USD as your Starting Fund'
        else:
            return "Sorry, this game not accepts your started fund less than 1000 dollars\n" \
                   "Please reconsider how much fund you want to prepare"

# This is a dice class in that sides can be selected by the player,
# and there is an add operation that allows the player to use two custom dice at the same time and get their total value.
class Dice:
    def __init__(self,side):
        self.side = side
    def roll(self):
        self.point = random.randint(1,self.side)
        return self.point
    def __str__(self):
        return f'the value of dice is {str(self.point)} in this time'
    def __eq__(self, other):
        if isinstance(other,Dice):
            return self.point == other.point
    def __ne__(self, other):
        if isinstance(other,Dice):
            return self.point != other.point
    def __lt__(self, other):
        if isinstance(other,Dice):
            return self.point < other.point
    def __gt__(self, other):
        if isinstance(other,Dice):
            return self.point > other.point
    def __le__(self, other):
        if isinstance(other,Dice):
            return self.point <= other.point
    def __ge__(self, other):
        if isinstance(other,Dice):
            return self.point >= other.point
    def __add__(self, other):
        if isinstance(other,Dice):
            return f'The Sum Value of two dices is {self.point + other.point}'
player = Dice(6)
player2 = Dice(6)
player.roll()
print(player.__str__())
player2.roll()
print(player2.__str__())
c = player.__add__(player2)
print(c)

# This is a dice cup, which contains three different dices, their classes are is above.
# A better plan is that the number of sides of three dices in the cup can be selected by the player, but this will cause the game rules to be too complicated,
# so I did not complete this plan, please forgive me
class TriangleDice:
    def __init__(self,side=3):
        self.side = 3
    def roll(self):
        self.point = random.randint(1,3)
        return self.point
    def __str__(self):
        return f'the value of dice is {str(self.point)} in this time'
class DodecahedronDice:
    def __init__(self,side=12):
        self.side = 12
    def roll(self):
        self.point = random.randint(1,12)
        return self.point
    def __str__(self):
        return f'the value of dice is {str(self.point)} in this time'
class SixDice:
    def __init__(self,side=6):
        self.side = 6
    def roll(self):
        self.point = random.randint(1,6)
        return self.point
    def __str__(self):
        return f'the value of dice is {str(self.point)} in this time'
class DiceCup:
    def __init__(self,rollnum,dice1=1,dice2=1,dice3=1):
        self.rollnum = rollnum
        self.dice1 = 1
        self.dice2 = 1
        self.dice3 = 1
    def roll(self):
        global record1
        global record2
        record1 = []
        record2 = []
        while len(record1) != self.rollnum:
            self.point1 = SixDice.roll(self)
            self.point2 = DodecahedronDice.roll(self)
            self.point3 = TriangleDice.roll(self)
            l = (self.point1,self.point2,self.point3)
            record1.append(l)

            self.point1 = SixDice.roll(self)
            self.point2 = DodecahedronDice.roll(self)
            self.point3 = TriangleDice.roll(self)
            l = (self.point1,self.point2,self.point3)
            record2.append(l)
        return record1
    def __str__(self):
        return f'This is your result in this time: {record1}'
    def __eq__(self, other):
        if type(self)==type(other):
            return record1 == record2
        else:
            return None
    def __ne__(self, other):
        if type(self)==type(other):
            return record1 != record2
        else:
            return None
    def __gt__(self, other):
         if type(self)==type(other):
            return  record1 > record2
         else:
            return None
    def __lt__(self, other):
        if type(self)==type(other):
            return record1 < record2
        else:
            return None
    def __le__(self, other):
        if type(self)==type(other):
            return record1 <= record2
        else:
            return None
    def __ge__(self, other):
        if type(self)==type(other):
            return  record1 >= record2



# This is a simple dice game. The system will determine whether the player wins by comparing the value obtained by the player with the value of the system.
# There are three types of dice provided by the system, three sides, six sides, and twelve sides. These three kinds of dices are in the dice cup,
# and the player will get a tuple containing three values every time they roll. The system will automatically select the same number of rolls as the player.
# In the end, the system will compare the tuple of both parties.
# If the player wins, he will get a double income of wager or lost all wager if lose. When the player's base return to zero, the game ends.
def PlayerFunction():

    name = input("Welcome player! What's your name?")
    base = input(f'How much are you going to invest in this game?'
                  f'Please enter the amount of fund you have prepared')
    print(PlayerInforMation(name,int(base)))

    print('')

    base=int(str(base))
    time = 0
    income = 0
    time_data = []
    wager_data = []

    while base > 0:
        select = int(input(f'Now, you have played "{str(time)} times\n'
                       f'And your still have {str(base)} dollar fund\n'
                       f'If you want to stop, please enter 1\n'
                       f'Otherwise, entry any other number to continue'))
        if select == 1:
            break
        else:

            wager =int(input("Please enter how much are you going to bet"))
            if wager <= 0:
                return "Please enter positive number"
            wager_data.append(wager)

            time = time + 1
            time_data.append(time)


            number = int(input("How many times do you want to roll? "))
            player = DiceCup(number)
            player.roll()
            print(player.__str__())

            if player.__eq__(player) == True:
                income = wager
                print('A tie, your wager will be refunded directly to you')
            else:
                if player.__gt__(player) == True or player.__ge__(player) == True :
                    income = wager * 2
                    print('you win! Your wager will be doubled and returned to you, congratulations!')

                if player.__lt__(player) == True or player.__le__(player) == True :
                    income = 0
                    print('you lose. You will lose your wager, itâ€™s a pity')

            income = income
            base = base-wager+income
    if base <= 0:
        return f'Dear {name},Your funds have been returned to zero, the game cannot be continued, thanks for your participation'
    else:
        return f'The game is over. Dear {name},you still have {str(base)} USD in principal'
print(PlayerFunction())



